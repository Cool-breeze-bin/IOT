# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\物联网应用\python\test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from re import T
from this import s
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtChart import QChartView,QChart, QLineSeries,QValueAxis
from PyQt5.QtGui import QCursor,QBrush,QColor,QStandardItemModel,QStandardItem
from PyQt5.QtWidgets import QToolTip,QHeaderView
from PyQt5.QtCore import QThread,pyqtSignal,QDateTime,QObject
import math
from PyQt5.QtCore import Qt
import pymysql
import read_sql

# 数据库连接，并获取数据
def sql_data():
    con = pymysql.connect(
    host='127.0.0.1',
    port=3306,
    user='root',
    passwd='123456',
    db='py_t_h',
    charset='utf8'
    )
    cur = con.cursor()
    data = read_sql.read(cur)
    return data
   
# 实时刷新数据线程
class BackendThread(QObject):
    # 通过类成员对象定义信号
    update_date = pyqtSignal(list)
    # 处理业务逻辑
    def run(self):
        while 1:
            self.update_date.emit(sql_data()) # 发射信号
            time.sleep(1) # 休眠1秒
            
class Ui_Dialog(object):
    def setupUi(self, Dialog,data):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1316, 735)
        self.data_len = [] # 数据库数据长度容器
        self.data_len.append(len(data[0]))  # 数据库长度
        self.Temp = QtWidgets.QLCDNumber(Dialog)
        self.Temp.setGeometry(QtCore.QRect(60, 50, 281, 121))
        self.Temp.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Temp.display(data[1][len(data[1])-1])
        self.Temp.setObjectName("Temp")
        self.temp_label = QtWidgets.QLabel(Dialog)
        self.temp_label.setGeometry(QtCore.QRect(120, 10, 131, 41))
        self.temp_label.setMinimumSize(QtCore.QSize(16, 17))
        self.temp_label.setSizeIncrement(QtCore.QSize(12, 15))
        self.temp_label.setBaseSize(QtCore.QSize(16, 11))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.temp_label.setFont(font)
        self.temp_label.setAlignment(QtCore.Qt.AlignCenter)
        self.temp_label.setWordWrap(False)
        self.temp_label.setObjectName("temp_label")
        
        self.graphicsView = QChartView(Dialog)
        self.graphicsView.setGeometry(QtCore.QRect(30, 190, 741, 511))
        self.graphicsView.setObjectName("graphicsView")
        self.humi_label = QtWidgets.QLabel(Dialog)
        self.humi_label.setGeometry(QtCore.QRect(520, 10, 131, 41))
        self.humi_label.setMinimumSize(QtCore.QSize(16, 17))
        self.humi_label.setSizeIncrement(QtCore.QSize(12, 15))
        self.humi_label.setBaseSize(QtCore.QSize(16, 11))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.humi_label.setFont(font)
        self.humi_label.setAlignment(QtCore.Qt.AlignCenter)
        self.humi_label.setWordWrap(False)
        self.humi_label.setObjectName("humi_label")
        self.Humi = QtWidgets.QLCDNumber(Dialog)
        self.Humi.setGeometry(QtCore.QRect(460, 50, 281, 121))
        self.Humi.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Humi.display(data[2][len(data[2])-1])
        self.Humi.setObjectName("Humi")
        self.history_label = QtWidgets.QLabel(Dialog)
        self.history_label.setGeometry(QtCore.QRect(800, 10, 131, 41))
        self.history_label.setMinimumSize(QtCore.QSize(16, 17))
        self.history_label.setSizeIncrement(QtCore.QSize(12, 15))
        self.history_label.setBaseSize(QtCore.QSize(16, 11))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.history_label.setFont(font)
        self.history_label.setAlignment(QtCore.Qt.AlignCenter)
        self.history_label.setWordWrap(False)
        self.history_label.setObjectName("history_label")
        self.end_time = QtWidgets.QDateTimeEdit(Dialog)
        self.end_time.setGeometry(QtCore.QRect(850, 131, 194, 31))
        self.end_time.setDateTime(QtCore.QDateTime(QtCore.QDate(2022, 7, 1), QtCore.QTime(0, 0, 0)))
        self.end_time.setObjectName("end_time")
        self.begain_time = QtWidgets.QDateTimeEdit(Dialog)
        self.begain_time.setGeometry(QtCore.QRect(850, 71, 194, 31))
        self.begain_time.setDateTime(QtCore.QDateTime(QtCore.QDate(2022, 3, 15), QtCore.QTime(0, 0, 0)))
        self.begain_time.setObjectName("begain_time")
        self.time_1 = self.begain_time.dateTime()
        # print(self.time_1)
        self.label_begain_time = QtWidgets.QLabel(Dialog)
        self.label_begain_time.setGeometry(QtCore.QRect(780, 80, 72, 15))
        self.label_begain_time.setObjectName("label_begain_time")
        self.label_end_time = QtWidgets.QLabel(Dialog)
        self.label_end_time.setGeometry(QtCore.QRect(780, 140, 72, 15))
        self.label_end_time.setObjectName("label_end_time")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(1090, 80, 93, 71))
        self.pushButton.setObjectName("pushButton")
        # 创建一个 0行3列 的标准模型
        self.model = QStandardItemModel(0, 3)
        # 设置表头标签
        self.model.setHorizontalHeaderLabels(['时间','温度', '湿度'])
        self.tableView = QtWidgets.QTableView(Dialog)
        self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tableView.setGeometry(QtCore.QRect(780, 190, 520, 511))
        self.tableView.setObjectName("tableView")
        # 设置表格的模型
        self.tableView.setStyleSheet("QTableView{background-color: rgb(255, 255, 255,80);}")
        self.tableView.setModel(self.model)
        # tableView不可编辑
        self.tableView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.retranslateUi(Dialog)
        self.initUI()
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap('test.ico'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setWindowTitle(_translate("Dialog", "一组的室内温湿度监测系统"))
        self.temp_label.setText(_translate("Dialog", "温度"))
        self.humi_label.setText(_translate("Dialog", "湿度"))
        self.history_label.setText(_translate("Dialog", "历史查询"))
        self.label_begain_time.setText(_translate("Dialog", "起始时间"))
        self.label_end_time.setText(_translate("Dialog", "结束时间"))
        self.pushButton.setText(_translate("Dialog", "查询"))
        self.setdate(data=sql_data()) # 设置页面数据
        
        
    def setdate(self,data):
        self.chart = QChart()  # 创建一个图表
        self.chart.setTitle("温湿度数据变化曲线")  # 设置图表标题
        # chart.setBackgroundVisible(False)  # 设置背景透明度
        self.chart.setBackgroundBrush(QBrush(QColor(255,255,255,100)))  # 设置背景颜色
        self.graphicsView.setChart(self.chart) # 将图表添加到QChartView中
        
        # 设置横坐标轴
        self.ax = QValueAxis()
        self.ax.setRange(0,30)
        self.ax.setTitleText("最新30条数据")
        
        # 设置温度纵坐标轴
        self.ay = QValueAxis()
        self.ay.setRange(min(data[1][-30:])-0.01, max(data[1][-30:])+0.01) # 设置温度范围
        self.ay.setTitleText("温度")
        
        # 设置湿度纵坐标轴
        self.ay1 = QValueAxis()
        self.ay1.setRange(min(data[2][-30:])-0.01, max(data[2][-30:])+0.01) # 设置湿度范围
        self.ay1.setTitleText("湿度")

        self.chart.addAxis(self.ax, Qt.AlignBottom) # 添加横坐标轴
        self.chart.addAxis(self.ay, Qt.AlignLeft) # 添加温度纵坐标轴
        self.chart.addAxis(self.ay1, Qt.AlignRight) # 添加湿度纵坐标轴
        
        # 温度曲线
        self.seri = QLineSeries(self.chart)
        self.seri.setName("温度")
        self.chart.addSeries(self.seri)
        j = [i for i in range(30)]
        for i,j in zip(range(len(data[0])-30,len(data[0])),j):
            self.seri.append(j,data[1][i])
            
        # 湿度曲线
        self.seri1 = QLineSeries(self.chart)
        self.seri1.setName("湿度")
        self.chart.addSeries(self.seri1)
        k = [i for i in range(30)]
        for i,j in zip(range(len(data[0])-30,len(data[0])),k):
            self.seri1.append(j,data[2][i])
        
        self.seri.attachAxis(self.ax) # 温度曲线和x轴绑定
        self.seri.attachAxis(self.ay) # 温度曲线和y轴绑定
        self.seri1.attachAxis(self.ax) # 湿度曲线和x轴绑定
        self.seri1.attachAxis(self.ay1) # 湿度曲线和y轴绑定
        
        self.seri.hovered.connect(self.onSeriesHoverd)
        # 设置seri线的颜色
        # pen = QPen(QColor(255, 0, 0))
        self.seri1.hovered.connect(self.onSeriesHoverd1)
        self.seri.setPointsVisible(True)
        self.seri1.setPointsVisible(True)
        self.chart.addSeries(self.seri) # chart中添加温度曲线
        self.chart.addSeries(self.seri1) # chart中添加湿度曲线
        
        for i in range(len(data[0])):
            self.model.appendRow([
                QStandardItem('%s' % str(data[3][i])),
                QStandardItem('%s' % str(data[1][i])),
                QStandardItem('%s' % str(data[2][i]))
            ])
            
    # 温度鼠标悬停事件(底部x,y)
    def onSeriesHoverd(self, point, state):
            if state:
                try:
                    name = self.sender().name()
                except:
                    name = "温度数据"
                sql = sql_data()[3][-30:]
                QToolTip.showText(QCursor.pos(), "%s\n时间: %s\n温度: %.3f" %
                                  (name, sql[int(point.x())], round(point.y(),3)))
    # 湿度鼠标悬停事件(底部x,y)
    def onSeriesHoverd1(self, point, state):
            # 鼠标悬停事件(底部x,y)
            if state:
                try:
                    name = self.sender().name()
                except:
                    name = "湿度数据"
                sql = sql_data()[3][-30:]
                QToolTip.showText(QCursor.pos(), "%s\n时间: %s\n湿度: %.3f" %
                                  (name, sql[int(point.x())], round(point.y(),3)))
    
    # 实时监听数据库数据变化
    def initUI(self):
        # 创建线程
        self.thread = QThread()
        self.backend = BackendThread()
        # 连接信号
        self.backend.update_date.connect(self.handleDisplay)
        self.backend.moveToThread(self.thread)
        # 开始线程
        self.thread.started.connect(self.backend.run)
        self.thread.start()

    # 刷新页面数据
    def handleDisplay(self, data):
        self.Temp.display(data[1][len(data[1])-1]) # 温度
        self.Humi.display(data[2][len(data[2])-1]) # 湿度

        self.seri.clear() # 清空温度曲线
        j = [i for i in range(30)]
        # 刷新温度曲线
        for i,j in zip(range(len(data[0])-30,len(data[0])),j):
            self.seri.append(j,data[1][i])

        self.seri1.clear() # 清空湿度曲线
        # 刷新湿度曲线
        k = [i for i in range(30)]
        for i,j in zip(range(len(data[0])-30,len(data[0])),k):
            self.seri1.append(j,data[2][i])
            
        self.data_len.append(len(data[0])) # 数据库数据长度列表
        
        # 判断数据库数据长度是否变化
        if self.data_len[1] != self.data_len[0]:
            self.model.clear() # 清空表格
            # 重置表格模型
            self.model.setHorizontalHeaderLabels(['时间','温度', '湿度'])
            for i in range(len(data[0])):
                self.model.appendRow([
                    QStandardItem('%s' % str(data[3][i])),
                    QStandardItem('%s' % str(data[1][i])),
                    QStandardItem('%s' % str(data[2][i]))
                ])
            self.tableView.setModel(self.model)
            # 删除数据库数据长度列表中的第一个元素
            del(self.data_len[0])
        else:
            # 删除数据库数据长度列表中的第一个元素
            del(self.data_len[0])
# 测试函数          
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)  # 创建QApplication对象
    Dialog = QtWidgets.QDialog()  # 创建QDialog对象
    palette = QtGui.QPalette()   # 创建QPalette对象
    # 设置背景图片
    palette.setBrush(QtGui.QPalette.Background, QtGui.QBrush(QtGui.QPixmap("water.jpg")))
    app.setPalette(palette)
    ui = Ui_Dialog() # 实例化
    ui.setupUi(Dialog,data=sql_data()) # 初始化
    Dialog.show() # 显示窗口
    sys.exit(app.exec_())  # 执行程序