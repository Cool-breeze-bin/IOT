# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\物联网应用\python\test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# 导包
from os import environ
from threading import Thread
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtChart import QChartView,QChart, QLineSeries,QValueAxis
from PyQt5.QtGui import QCursor,QBrush,QColor,QStandardItemModel,QStandardItem
from PyQt5.QtWidgets import QToolTip
from PyQt5.QtCore import QThread,pyqtSignal,QObject,Qt
from matplotlib.axis import YAxis
import pymysql,sql_0
import read_sql
import serial
from PyQt5.QtWebEngineWidgets import QWebEngineView
import winsound
# Pyecharts
from pyecharts.charts import Line,Bar

# 数据库连接，并获取数据
# con sql
def sql_11():
    con = pymysql.connect(
    host='127.0.0.1',
    port=3306,
    user='root',
    passwd='123456',
    db='py_t_h',
    charset='utf8'
    )
    return con

# Cur sql
def sql():
    con = pymysql.connect(
    host='127.0.0.1',
    port=3306,
    user='root',
    passwd='123456',
    db='py_t_h',
    charset='utf8'
    )
    cur = con.cursor()
    return cur

# 获取数据库数据，子函数
def sql_data(cur):
    # cur = con.cursor()
    # uart_data(cur)
    data = read_sql.read(cur)
    return data

def recive_data():
    return [ui2.temp_max,ui2.temp_min,ui2.humi_max,ui2.humi_min]
# 获取数据库数据
def sql_data_1(cur):
    # cur = con.cursor()
    uart_data(cur)
    data = sql_data(cur)
    # ui0.beep()
    return data

# 读取串口数据以及显示在界面上，并存入数据库
def uart_data(cur):
    serial_1 = serial.Serial('COM12',9600,timeout = 1)
    # cur = con.cursor()
    cur.execute("SELECT * FROM py_t_h")
    all = cur.fetchall()
    box_id = '41905225'
    id = len(all)
    data_2 =[]
    while True:
        data_00 = serial_1.read_all()
        if len(data_00) == 10:
            data_11 = sql_0.data_recive(data_00)
            # print(data_11)
            sql_0.insert(id,data_11[0],data_11[1],box_id,sql_11())
            if data_11[0]>ui2.temp_max:
                ui0.Temp.setStyleSheet("""QLCDNumber 
                                                   { 
                                                     color: red;
                                                   }""")
                # winsound.Beep(800,2000)
            if data_11[0]<ui2.temp_min:
                ui0.Temp.setStyleSheet("""QLCDNumber 
                                                   { 
                                                     color: blue;
                                                   }""")
            if data_11[1]>ui2.humi_max:
                ui0.Humi.setStyleSheet("""QLCDNumber 
                                                   { 
                                                     color: red;
                                                   }""")
            if data_11[1]<ui2.humi_min:
                ui0.Humi.setStyleSheet("""QLCDNumber 
                                                   { 
                                                     color: blue;
                                                   }""")
                # winsound.Beep(1000,1000)
            if data_11[0]<ui2.temp_max and data_11[0]> ui2.temp_min and data_11[1]<ui2.humi_max and data_11[1]>ui2.humi_min:
                ui0.Temp.setStyleSheet("""QLCDNumber 
                                                   { 
                                                     color: black;
                                                   }""")
                ui0.Humi.setStyleSheet("""QLCDNumber 
                                                   { 
                                                     color: black;
                                                   }""")
            data_2 = data_11
            break
            # data_1[0],data_1[1]
    return data_2
    
# 实时刷新数据线程
class BackendThread(QObject):
    # 通过类成员对象定义信号
    update_date = pyqtSignal(list)
    # 处理业务逻辑
    def run(self):
        while 1:
            self.update_date.emit(sql_data_1(sql())) # 发射信号
            self.update_date.emit(sql_data(sql()))
            # self.update_date.emit(recive_data())
            time.sleep(1) # 休眠1秒
# 判断设置与接收值线程  
class BackendThread1(QObject):
    # 通过类成员对象定义信号
    update_date = pyqtSignal(list)
    # 处理业务逻辑
    def run(self):
        while 1:
            # self.update_date.emit(sql_data_1(sql())) # 发射信号
            self.update_date.emit(recive_data())
            time.sleep(5) # 休眠5秒
# 蜂鸣器线程
class Beep(Thread):
    def run(self):
        winsound.Beep(1000,2000)
        time.sleep(1)

# 解决QT版本报错问题
def suppress_qt_warnings():
    environ["QT_DEVICE_PIXEL_RATIO"] = "0"
    environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"
    environ["QT_SCREEN_SCALE_FACTORS"] = "1"
    environ["QT_SCALE_FACTOR"] = "1"

# 主页面           
class Ui_Dialog(object):
    def setupUi(self, Dialog,data):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1316, 735)
        self.data_len = [] # 数据库数据长度容器
        self.data_len.append(len(data[0]))  # 数据库长度
        self.Temp = QtWidgets.QLCDNumber(Dialog)
        self.Temp.setGeometry(QtCore.QRect(60, 50, 281, 121))
        self.Temp.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Temp.display(data[1][len(data[1])-1])
        self.Temp.setObjectName("Temp")
        self.temp_label = QtWidgets.QLabel(Dialog)
        self.temp_label.setGeometry(QtCore.QRect(120, 10, 131, 41))
        self.temp_label.setMinimumSize(QtCore.QSize(16, 17))
        self.temp_label.setSizeIncrement(QtCore.QSize(12, 15))
        self.temp_label.setBaseSize(QtCore.QSize(16, 11))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.temp_label.setFont(font)
        self.temp_label.setAlignment(QtCore.Qt.AlignCenter)
        self.temp_label.setWordWrap(False)
        self.temp_label.setObjectName("temp_label")
        
        self.graphicsView = QChartView(Dialog)
        self.graphicsView.setGeometry(QtCore.QRect(30, 190, 741, 511))
        self.graphicsView.setObjectName("graphicsView")
        self.humi_label = QtWidgets.QLabel(Dialog)
        self.humi_label.setGeometry(QtCore.QRect(520, 10, 131, 41))
        self.humi_label.setMinimumSize(QtCore.QSize(16, 17))
        self.humi_label.setSizeIncrement(QtCore.QSize(12, 15))
        self.humi_label.setBaseSize(QtCore.QSize(16, 11))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.humi_label.setFont(font)
        self.humi_label.setAlignment(QtCore.Qt.AlignCenter)
        self.humi_label.setWordWrap(False)
        self.humi_label.setObjectName("humi_label")
        self.Humi = QtWidgets.QLCDNumber(Dialog)
        self.Humi.setGeometry(QtCore.QRect(460, 50, 281, 121))
        self.Humi.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Humi.display(data[2][len(data[2])-1])
        self.Humi.setObjectName("Humi")
        self.history_label = QtWidgets.QLabel(Dialog)
        self.history_label.setGeometry(QtCore.QRect(800, 10, 131, 41))
        self.history_label.setMinimumSize(QtCore.QSize(16, 17))
        self.history_label.setSizeIncrement(QtCore.QSize(12, 15))
        self.history_label.setBaseSize(QtCore.QSize(16, 11))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.history_label.setFont(font)
        self.history_label.setAlignment(QtCore.Qt.AlignCenter)
        self.history_label.setWordWrap(False)
        self.history_label.setObjectName("history_label")
        self.end_time = QtWidgets.QDateTimeEdit(Dialog)
        self.end_time.setGeometry(QtCore.QRect(850, 131, 194, 31))
        self.end_time.setDateTime(QtCore.QDateTime(QtCore.QDate(2022, 7, 1), QtCore.QTime(0, 0, 0)))
        self.end_time.setObjectName("end_time")
        self.begain_time = QtWidgets.QDateTimeEdit(Dialog)
        self.begain_time.setGeometry(QtCore.QRect(850, 71, 194, 31))
        self.begain_time.setDateTime(QtCore.QDateTime(QtCore.QDate(2022, 3, 15), QtCore.QTime(0, 0, 0)))
        self.begain_time.setObjectName("begain_time")
        self.time_1 = self.begain_time.dateTime()
        # print(self.time_1)
        self.label_begain_time = QtWidgets.QLabel(Dialog)
        self.label_begain_time.setGeometry(QtCore.QRect(780, 80, 72, 15))
        self.label_begain_time.setObjectName("label_begain_time")
        self.label_end_time = QtWidgets.QLabel(Dialog)
        self.label_end_time.setGeometry(QtCore.QRect(780, 140, 72, 15))
        self.label_end_time.setObjectName("label_end_time")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(1090, 80, 93, 71))
        self.pushButton.setObjectName("pushButton")
        
        self.pushButton1 = QtWidgets.QPushButton(Dialog)
        self.pushButton1.setGeometry(QtCore.QRect(1190, 80, 93, 71))
        self.pushButton1.setObjectName("pushButton1")
        # self.pushButton.clicked.connect(self.)
        # 创建一个 0行3列 的标准模型
        self.model = QStandardItemModel(0, 3)
        # 设置表头标签
        self.model.setHorizontalHeaderLabels(['时间','温度', '湿度'])
        self.tableView = QtWidgets.QTableView(Dialog)
        self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tableView.setGeometry(QtCore.QRect(780, 190, 520, 511))
        self.tableView.setObjectName("tableView")
        # 设置表格的模型
        self.tableView.setStyleSheet("QTableView{background-color: rgb(255, 255, 255,80);}")
        self.tableView.setModel(self.model)
        # 设置tableView不可编辑
        self.tableView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.retranslateUi(Dialog)
        self.initUI()
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
    # def show_history_data(self):
    #     show_history()
    def sql():
        con = pymysql.connect(
        host='127.0.0.1',
        port=3306,
        user='root',
        passwd='123456',
        db='py_t_h',
        charset='utf8'
        )
        cur = con.cursor()
        return cur

    def sql_data(cur):
        data = read_sql.read(cur)
        return data
    
    def beep(self):
        if self.Humi.value() >60:
            winsound.Beep(1000,1000)
        if self.Temp.value() >20:
            winsound.Beep(800,2000)
    
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap('test.ico'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setWindowTitle(_translate("Dialog", "房彬彬41905225的室内温湿度监测系统"))
        self.temp_label.setText(_translate("Dialog", "温度"))
        self.humi_label.setText(_translate("Dialog", "湿度"))
        self.history_label.setText(_translate("Dialog", "历史记录"))
        self.label_begain_time.setText(_translate("Dialog", "起始时间"))
        self.label_end_time.setText(_translate("Dialog", "结束时间"))
        self.pushButton.setText(_translate("Dialog", "查询"))
        self.pushButton1.setText(_translate("Dialog", "子系统"))
        self.setdate(data=sql_data(sql())) # 设置页面数据
        
    def setdate(self,data):
        self.chart = QChart()  # 创建一个图表
        self.chart.setTitle("温湿度数据变化曲线")  # 设置图表标题
        self.chart.setBackgroundBrush(QBrush(QColor(255,255,255,100)))  # 设置背景颜色
        self.graphicsView.setChart(self.chart) # 将图表添加到QChartView中
        # 设置横坐标轴
        self.ax = QValueAxis()
        self.ax.setRange(0,30)
        self.ax.setTitleText("最新30条数据")
        # 设置温度纵坐标轴
        self.ay = QValueAxis()
        self.ay.setRange(min(data[1][-30:])-0.01, max(data[1][-30:])+0.01) # 设置温度范围
        self.ay.setTitleText("温度")
        # 设置湿度纵坐标轴
        self.ay1 = QValueAxis()
        self.ay1.setRange(min(data[2][-30:])-0.01, max(data[2][-30:])+0.01) # 设置湿度范围
        self.ay1.setTitleText("湿度")
        self.chart.addAxis(self.ax, Qt.AlignBottom) # 添加横坐标轴
        self.chart.addAxis(self.ay, Qt.AlignLeft) # 添加温度纵坐标轴
        self.chart.addAxis(self.ay1, Qt.AlignRight) # 添加湿度纵坐标轴
        # 温度曲线
        self.seri = QLineSeries(self.chart)
        self.seri.setName("温度")
        self.chart.addSeries(self.seri)
        j = [i for i in range(30)]
        for i,j in zip(range(len(data[0])-30,len(data[0])),j):
            self.seri.append(j,data[1][i])
        # 湿度曲线
        self.seri1 = QLineSeries(self.chart)
        self.seri1.setName("湿度")
        self.chart.addSeries(self.seri1)
        k = [i for i in range(30)]
        for i,j in zip(range(len(data[0])-30,len(data[0])),k):
            self.seri1.append(j,data[2][i])
        self.seri.attachAxis(self.ax) # 温度曲线和x轴绑定
        self.seri.attachAxis(self.ay) # 温度曲线和y轴绑定
        self.seri1.attachAxis(self.ax) # 湿度曲线和x轴绑定
        self.seri1.attachAxis(self.ay1) # 湿度曲线和y轴绑定
        
        self.seri.hovered.connect(self.onSeriesHoverd)
        # 设置seri线的颜色
        self.seri1.hovered.connect(self.onSeriesHoverd1)
        self.seri.setPointsVisible(True)
        self.seri1.setPointsVisible(True)
        # self.chart.addSeries(self.seri) # chart中添加温度曲线
        # self.chart.addSeries(self.seri1) # chart中添加湿度曲线
        
        for i in range(len(data[0])):
            self.model.appendRow([
                QStandardItem('%s' % str(data[3][i])),
                QStandardItem('%s' % str(data[1][i])),
                QStandardItem('%s' % str(data[2][i]))
            ])
        # self.beep()
            
    # 温度鼠标悬停事件(底部x,y)
    def onSeriesHoverd(self, point, state):
            if state:
                try:
                    name = self.sender().name()
                except:
                    name = "温度数据"
                sql_th = sql_data(sql())[3][-30:]
                QToolTip.showText(QCursor.pos(), "%s\n时间: %s\n温度: %.3f" %
                                  (name, sql_th[int(point.x())], round(point.y(),3)))
    # 湿度鼠标悬停事件(底部x,y)
    def onSeriesHoverd1(self, point, state):
            # 鼠标悬停事件(底部x,y)
            if state:
                try:
                    name = self.sender().name()
                except:
                    name = "湿度数据"
                sql_th = sql_data(sql())[3][-30:]
                QToolTip.showText(QCursor.pos(), "%s\n时间: %s\n湿度: %.3f" %
                                  (name, sql_th[int(point.x())], round(point.y(),3)))
    
    # 实时监听数据库数据变化
    def initUI(self):
        # 创建线程
        self.thread = QThread()
        # self.thread1 = QThread()
        self.backend = BackendThread()
        # self.backend1 = BackendThread1()
        # 连接信号
        self.backend.update_date.connect(self.handleDisplay)
        self.backend.moveToThread(self.thread)
        
        # self.backend1.update_date.connect(self.handleDisplay1)
        # self.backend1.moveToThread(self.thread)
        # 开始线程
        self.thread.started.connect(self.backend.run)
        # self.thread.started.connect(self.backend1.run)
        self.thread.start()
        

    # 刷新页面数据
    def handleDisplay(self, data):
        self.Temp.display(data[1][len(data[1])-1]) # 温度
        self.Humi.display(data[2][len(data[2])-1]) # 湿度
        self.seri.clear() # 清空温度曲线
        self.ay.setRange(min(data[1][-30:])-0.01, max(data[1][-30:])+0.01) # 设置温度范围
        self.ay1.setRange(min(data[2][-30:])-0.01, max(data[2][-30:])+0.01) # 设置湿度范围
        j = [i for i in range(30)]
        # 刷新温度曲线
        for i,j in zip(range(len(data[0])-30,len(data[0])),j):
            self.seri.append(j,data[1][i])
        self.seri1.clear() # 清空湿度曲线
        # 刷新湿度曲线
        k = [i for i in range(30)]
        for i,j in zip(range(len(data[0])-30,len(data[0])),k):
            self.seri1.append(j,data[2][i])
        self.data_len.append(len(data[0])) # 数据库数据长度列表
        # 判断数据库数据长度是否变化
        if self.data_len[1] != self.data_len[0]:
            self.model.clear() # 清空表格
            # 重置表格模型
            self.model.setHorizontalHeaderLabels(['时间','温度', '湿度'])
            for i in range(len(data[0])):
                self.model.appendRow([
                    QStandardItem('%s' % str(data[3][i])),
                    QStandardItem('%s' % str(data[1][i])),
                    QStandardItem('%s' % str(data[2][i]))
                ])
            self.tableView.setModel(self.model)
            # 删除数据库数据长度列表中的第一个元素
            del(self.data_len[0])
        else:
            # 删除数据库数据长度列表中的第一个元素
            del(self.data_len[0])

    def handleDisplay1(self, data):
        self.Temp.display(data[1][len(data[1])-1]) # 温度
        self.Humi.display(data[2][len(data[2])-1]) # 湿度
        self.seri.clear() # 清空温度曲线
        self.ay.setRange(min(data[1][-30:])-0.01, max(data[1][-30:])+0.01) # 设置温度范围
        self.ay1.setRange(min(data[2][-30:])-0.01, max(data[2][-30:])+0.01) # 设置湿度范围
        j = [i for i in range(30)]
        # 刷新温度曲线
        for i,j in zip(range(len(data[0])-30,len(data[0])),j):
            self.seri.append(j,data[1][i])
        self.seri1.clear() # 清空湿度曲线
        # 刷新湿度曲线
        k = [i for i in range(30)]
        for i,j in zip(range(len(data[0])-30,len(data[0])),k):
            self.seri1.append(j,data[2][i])
        self.data_len.append(len(data[0])) # 数据库数据长度列表
        self.beep()
        # 判断数据库数据长度是否变化
        if self.data_len[1] != self.data_len[0]:
            self.model.clear() # 清空表格
            # 重置表格模型
            self.model.setHorizontalHeaderLabels(['时间','温度', '湿度'])
            for i in range(len(data[0])):
                self.model.appendRow([
                    QStandardItem('%s' % str(data[3][i])),
                    QStandardItem('%s' % str(data[1][i])),
                    QStandardItem('%s' % str(data[2][i]))
                ])
            self.tableView.setModel(self.model)
            # 删除数据库数据长度列表中的第一个元素
            del(self.data_len[0])
        else:
            # 删除数据库数据长度列表中的第一个元素
            del(self.data_len[0])

# 历史记录查询页面
paths = []
class Ui_MainWindow(object):
    # UI设计
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1169, 685)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.BegainDateTime = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.BegainDateTime.setGeometry(QtCore.QRect(130, 10, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.BegainDateTime.setFont(font)
        self.BegainDateTime.setDateTime(QtCore.QDateTime(QtCore.QDate(2022, 3, 1), QtCore.QTime(0, 0, 0)))
        self.BegainDateTime.setObjectName("BegainDateTime")
        self.EndDateTimeEdit = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.EndDateTimeEdit.setGeometry(QtCore.QRect(360, 10, 201, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.EndDateTimeEdit.setFont(font)
        self.EndDateTimeEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(2022, 7, 1), QtCore.QTime(0, 0, 0)))
        self.EndDateTimeEdit.setObjectName("EndDateTimeEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_to = QtWidgets.QLabel(self.centralwidget)
        self.label_to.setGeometry(QtCore.QRect(330, 10, 31, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_to.setFont(font)
        self.label_to.setObjectName("label_to")
        self.CheckButton = QtWidgets.QPushButton(self.centralwidget)
        self.CheckButton.setGeometry(QtCore.QRect(610, 10, 141, 41))
        
        
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.CheckButton.setFont(font)
        self.CheckButton.setObjectName("CheckButton")
        self.CheckButton.clicked.connect(self.set_table_data)
        
        self.label_temp_avg = QtWidgets.QLabel(self.centralwidget)
        self.label_temp_avg.setGeometry(QtCore.QRect(40, 620, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_temp_avg.setFont(font)
        self.label_temp_avg.setObjectName("label_temp_avg")
        self.label_temp_avg_num = QtWidgets.QLabel(self.centralwidget)
        self.label_temp_avg_num.setGeometry(QtCore.QRect(190, 620, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_temp_avg_num.setFont(font)
        self.label_temp_avg_num.setStyleSheet("color: rgb(255, 185, 0);")
        self.label_temp_avg_num.setObjectName("label_temp_avg_num")
        self.label_humi_avg = QtWidgets.QLabel(self.centralwidget)
        self.label_humi_avg.setGeometry(QtCore.QRect(270, 620, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_humi_avg.setFont(font)
        self.label_humi_avg.setObjectName("label_humi_avg")
        self.label_humi_avg_num = QtWidgets.QLabel(self.centralwidget)
        self.label_humi_avg_num.setGeometry(QtCore.QRect(420, 620, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_humi_avg_num.setFont(font)
        self.label_humi_avg_num.setStyleSheet("color: rgb(255, 185, 0);")
        self.label_humi_avg_num.setObjectName("label_humi_avg_num")
        
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(40, 110, 541, 491))
        self.tableView.setObjectName("tableView")
        self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        # 创建一个 0行3列 的标准模型
        self.model = QStandardItemModel(0, 3)
        # 设置表头标签
        self.model.setHorizontalHeaderLabels(['时间','温度', '湿度'])
        # 设置表格的模型
        self.tableView.setStyleSheet("QTableView{background-color: rgb(255, 255, 255,80);}")
        self.tableView.setModel(self.model)
        # 设置tableView不可编辑
        self.tableView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        
        self.label_return = QtWidgets.QLabel(self.centralwidget)
        self.label_return.setGeometry(QtCore.QRect(260, 70, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_return.setFont(font)
        self.label_return.setObjectName("label_return")
        
        self.label_return1 = QtWidgets.QLabel(self.centralwidget)
        self.label_return1.setGeometry(QtCore.QRect(830, 70, 131, 31))
        font1 = QtGui.QFont()
        font1.setFamily("Arial")
        font1.setPointSize(14)
        font1.setBold(True)
        font1.setWeight(75)
        self.label_return1.setFont(font1)
        self.label_return1.setObjectName("label_return1")
        
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(960, 140, 93, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 943, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        
        self.PathEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.PathEdit.setGeometry(QtCore.QRect(630, 140, 311, 31))
        self.PathEdit.setInputMask("")
        self.PathEdit.setText("")
        self.PathEdit.setObjectName("PathEdit")
        self.DownloadButton = QtWidgets.QPushButton(self.centralwidget)
        self.DownloadButton.setGeometry(QtCore.QRect(1060, 140, 93, 31))
        self.DownloadButton.setObjectName("DownloadButton")
        self.DownloadButton.clicked.connect(self.set_chart)
        
        self.QwebView = QWebEngineView(self.centralwidget)
        self.QwebView.setGeometry(QtCore.QRect(630, 180, 521, 421))
        self.QwebView.setObjectName("QwebView")
        # self.QwebView.setStyleSheet("QwebView{background-color: rgb(255, 255, 255,80);}")
        self.choiseButton = QtWidgets.QPushButton(self.centralwidget)
        self.choiseButton.setGeometry(QtCore.QRect(630, 110, 101, 28))
        self.choiseButton.setObjectName("choiseButton")
        self.choiseButton.clicked.connect(self.set_data)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1169, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.set_table_data()
    
    # Ui界面中主要的控件内容及名称
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap('test.ico'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowTitle(_translate("MainWindow", "41905225房彬彬历史查询页面"))
        self.label.setText(_translate("MainWindow", "时间查询"))
        self.label_to.setText(_translate("MainWindow", "至"))
        # self.label_temp_avg.setText(_translate("MainWindow", "温度平均值"))
        # self.label_humi_avg.setText(_translate("MainWindow", "湿度平均值"))
        self.CheckButton.setText(_translate("MainWindow", "查询"))
        self.label_return.setText(_translate("MainWindow", "查询结果"))
        self.label_return1.setText(_translate("MainWindow", "可视化预览"))
        self.comboBox.setItemText(0, _translate("MainWindow", "折线图"))
        self.comboBox.setItemText(1, _translate("MainWindow", "柱状图"))
        # self.LineButton.setText(_translate("MainWindow", "折线图"))
        # self.PieButton.setText(_translate("MainWindow", "饼图"))
        self.PathEdit.setPlaceholderText(_translate("MainWindow", "请输入或选择想要保存图表的位置"))
        self.DownloadButton.setText(_translate("MainWindow", "生成图表"))
        self.choiseButton.setText(_translate("MainWindow", "选择缓存目录"))
        self.label_temp_avg.setText(_translate("MainWindow", "温度平均值:"))
        self.label_temp_avg_num.setText(_translate("MainWindow", "1111"))
        self.label_humi_avg.setText(_translate("MainWindow", "湿度平均值:"))
        self.label_humi_avg_num.setText(_translate("MainWindow", "1111"))
        
    # 读取数据（缓存路径）子函数
    def select_file(self):
        file_name = QtWidgets.QFileDialog.getExistingDirectory(None, '选择缓存位置', './')
        paths.append(file_name+'/')
        self.PathEdit.setText(file_name+'/')
    
    # 生成图表按钮事件
    def set_chart(self):
        if self.PathEdit.text() == "" and self.comboBox.currentText() == "折线图":
            self.select_file()
            path = self.PathEdit.text()
            self.line_chart(path)
        if self.PathEdit.text() != "" and self.comboBox.currentText() == "折线图":
            path = self.PathEdit.text()
            self.line_chart(path)
        if self.PathEdit.text() == "" and self.comboBox.currentText() == "柱状图":
            self.select_file()
            path = self.PathEdit.text()
            self.bar_multiple(path)
        if self.PathEdit.text() != "" and self.comboBox.currentText() == "柱状图":
            path = self.PathEdit.text()
            self.bar_multiple(path)
    
    # 折线图
    def line_chart(self,path):
        import pyecharts.options as opts
        data = self.read(self.sql_connect())
        name_list = data[3]
        temp = data[1]
        humi = data[2]
        (
            # pyecharts 折线图
            Line(init_opts=opts.InitOpts(width="500px", height="380px"))
            .add_xaxis(xaxis_data=name_list)
            .add_yaxis(
                series_name="温度",
                y_axis=temp,
                areastyle_opts=opts.AreaStyleOpts(opacity=0.5),
                linestyle_opts=opts.LineStyleOpts(),
                label_opts=opts.LabelOpts(is_show=False),
                # 显示最大最小标签
                markpoint_opts=opts.MarkPointOpts(
                    data=[
                        opts.MarkPointItem(type_="max", name="最大值"),
                        opts.MarkPointItem(type_="min", name="最小值"),
                    ]
                ),
            )
            .add_yaxis(
                series_name="湿度",
                y_axis=humi,
                yaxis_index=1,
                areastyle_opts=opts.AreaStyleOpts(opacity=0.5),
                linestyle_opts=opts.LineStyleOpts(),
                label_opts=opts.LabelOpts(is_show=False),
            )
            .extend_axis(
                yaxis=opts.AxisOpts(
                    name="湿度(%RH)",
                    name_location="start",
                    type_="value",
                    max_=max(humi)+0.1,
                    is_inverse=True,
                    axistick_opts=opts.AxisTickOpts(is_show=True),
                    splitline_opts=opts.SplitLineOpts(is_show=True),
                )
            )
            .set_global_opts(
                title_opts=opts.TitleOpts(
                    title="温湿度图表",
                    pos_left="center",
                    pos_top="top",
                ),
                tooltip_opts=opts.TooltipOpts(trigger="axis", axis_pointer_type="cross"),
                legend_opts=opts.LegendOpts(pos_left="left"),
                datazoom_opts=[
                    opts.DataZoomOpts(range_start=0, range_end=100),
                    opts.DataZoomOpts(type_="inside", range_start=0, range_end=100),
                ],
                xaxis_opts=opts.AxisOpts(type_="category", boundary_gap=False),
                yaxis_opts=opts.AxisOpts(name="温度(℃)", type_="value", max_=round(max(temp)+0.1,2)),
            )
            .set_series_opts(
                markarea_opts=opts.MarkAreaOpts(
                    is_silent=False,
                    data=[
                        opts.MarkAreaItem(
                            name="温度",
                            x=(self.BegainDateTime.text(),self.EndDateTimeEdit.text()),
                            label_opts=opts.LabelOpts(is_show=False),
                            itemstyle_opts=opts.ItemStyleOpts(color="#DCA3A2", opacity=0.5),
                        ),
                        opts.MarkAreaItem(
                            name="湿度",
                            x=(self.BegainDateTime.text(),self.EndDateTimeEdit.text()),
                            label_opts=opts.LabelOpts(is_show=False),
                            itemstyle_opts=opts.ItemStyleOpts(color="#A1A9AF", opacity=0.5),
                        ),
                    ],
                ),
                axisline_opts=opts.AxisLineOpts(),
            )
            .render(path+"line_{0}_to_{1}.html".format(self.BegainDateTime.text().replace(' ','_').replace('/','_').replace(':','时'),self.EndDateTimeEdit.text().replace(' ','_').replace('/','_').replace(':','时')))
        )
        self.QwebView.load(QtCore.QUrl(path+"line_{0}_to_{1}.html".format(self.BegainDateTime.text().replace(' ','_').replace('/','_').replace(':','时'),self.EndDateTimeEdit.text().replace(' ','_').replace('/','_').replace(':','时'))))
    
    # 柱状图
    def bar_multiple(self,path):
        import pyecharts.options as opts
        colors = ["#5793f3", "#d14a61", "#675bba"]
        data = self.read(self.sql_connect())
        name_list = data[3]
        temp = data[1]
        humi = data[2]
        bar=(
            Bar(init_opts=opts.InitOpts(width="500px", height="380px"))
            .add_xaxis(xaxis_data=name_list)
            .add_yaxis(
                series_name="温度",
                y_axis=temp,
                yaxis_index=0,
                color=colors[1],
            )
            .add_yaxis(
                series_name="湿度", y_axis=humi, yaxis_index=1, color=colors[0],
            )
            .extend_axis(
                yaxis=opts.AxisOpts(
                    name="湿度(%RH)",
                    type_="value",
                    min_=round(min(humi)-0.1,2),
                    max_=max(humi)+0.1,
                    position="right",
                    axisline_opts=opts.AxisLineOpts(
                        linestyle_opts=opts.LineStyleOpts(color=colors[1])
                    ),
                    # axislabel_opts=opts.LabelOpts(formatter="{value} %RH"),
                )
            )
            .extend_axis(
                yaxis=opts.AxisOpts(
                    type_="value",
                    name="温度(℃)",
                    # min_=min(temp)-0.1,
                    # max_=max(temp)+0.1,
                    position="left",
                    # axisline_opts=opts.AxisLineOpts(
                    #     linestyle_opts=opts.LineStyleOpts(color=colors[2])
                    # ),
                    # axislabel_opts=opts.LabelOpts(formatter="{value} °C"),
                    # splitline_opts=opts.SplitLineOpts(
                    #     is_show=True, linestyle_opts=opts.LineStyleOpts(opacity=1)
                    # ),
                )
            )
            .set_series_opts(label_opts=opts.LabelOpts(is_show=False))
            .set_global_opts(
                title_opts=opts.TitleOpts(title="温湿度可视化"),
                datazoom_opts=opts.DataZoomOpts(type_='slider'),
            )
            
        )
        bar.render(path+"bar_{0}_to_{1}.html".format(self.BegainDateTime.text().replace(' ','_').replace('/','_').replace(':','时'),self.EndDateTimeEdit.text().replace(' ','_').replace('/','_').replace(':','时')))
        self.QwebView.load(QtCore.QUrl(path+"bar_{0}_to_{1}.html".format(self.BegainDateTime.text().replace(' ','_').replace('/','_').replace(':','时'),self.EndDateTimeEdit.text().replace(' ','_').replace('/','_').replace(':','时'))))
   
    # 数据库连接
    def sql_connect(self):
        # 连接数据库
        con = pymysql.connect(
        host='127.0.0.1',
        port=3306,
        user='root',
        passwd='123456',
        db='py_t_h',
        charset='utf8'
        )
        return con
    
    # 读取数据（缓存路径）
    def set_data(self):
        self.select_file()
    
    # 读取数据（数据库数据）
    def read(self,con):
        cur = con.cursor()
        # 数据库命令
        begin_date = self.BegainDateTime.text()
        # print(begin_date)
        end_date = self.EndDateTimeEdit.text()
        # print(end_date)
        select = cur.execute("SELECT * FROM py_t_h WHERE collect_time BETWEEN %s AND %s", (begin_date, end_date))
        # print(select)#预览数据概况
        # 获取所有数据
        all = cur.fetchall()
        # 创建列表，存储作图所需要的数据
        date = []
        date1 = []
        temp = []
        humi = []
        # 判断是否有数据
        if len(all) > 0:
            for i in all:
                date.append(i[0])
                date1.append(i[1])
                temp.append(round(float(i[2]),2))
                humi.append(round(float(i[3]),2))
        else:
            print("数据库无数据！")
        # 返回作图所需的数据
        return [date,temp,humi,date1,select]
    
    # 表格数据（tableview数据）
    def set_table_data(self):
        data = self.read(self.sql_connect())
        self.label_temp_avg_num.setText(str(round(sum(data[1])/len(data[1]),2))+"℃")
        self.label_humi_avg_num.setText(str(round(sum(data[2])/len(data[2]),2))+"%RH")
        # print(data)
        # return data
        self.model.clear()
        self.model.setHorizontalHeaderLabels(['时间','温度', '湿度'])
        for i in range(len(data[0])):
                self.model.appendRow([
                    QStandardItem('%s' % str(data[3][i])),
                    QStandardItem('%s' % str(data[1][i])),
                    QStandardItem('%s' % str(data[2][i]))
                ])
    
    
# 子系统页面
class Ui_MainWindow1(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(901, 726)
        self.a = 0
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.temp_max_label = QtWidgets.QLabel(self.centralwidget)
        self.temp_max_label.setGeometry(QtCore.QRect(40, 30, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.temp_max_label.setFont(font)
        self.temp_max_label.setStyleSheet("color: rgb(170, 85, 255);")
        self.temp_max_label.setObjectName("temp_max_label")
        self.label_temp_min = QtWidgets.QLabel(self.centralwidget)
        self.label_temp_min.setGeometry(QtCore.QRect(40, 80, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_temp_min.setFont(font)
        self.label_temp_min.setStyleSheet("color: rgb(170, 85, 255);")
        self.label_temp_min.setObjectName("label_temp_min")
        self.label_humi_max = QtWidgets.QLabel(self.centralwidget)
        self.label_humi_max.setGeometry(QtCore.QRect(40, 130, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_humi_max.setFont(font)
        self.label_humi_max.setStyleSheet("color: rgb(80, 161, 119);")
        self.label_humi_max.setObjectName("label_humi_max")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(40, 180, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: rgb(80, 161, 119);")
        self.label_4.setObjectName("label_4")
        self.spinBox_temp_max = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_temp_max.setGeometry(QtCore.QRect(140, 30, 121, 22))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.spinBox_temp_max.setFont(font)
        self.spinBox_temp_max.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.spinBox_temp_max.setMinimum(0)
        self.spinBox_temp_max.setProperty("value", 45)
        self.spinBox_temp_max.setObjectName("spinBox_temp_max")
        self.spinBox_temp_min = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_temp_min.setGeometry(QtCore.QRect(140, 80, 121, 22))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.spinBox_temp_min.setFont(font)
        self.spinBox_temp_min.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.spinBox_temp_min.setMinimum(-40)
        self.spinBox_temp_min.setMaximum(99)
        self.spinBox_temp_min.setObjectName("spinBox_temp_min")
        self.spinBox_humi_max = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_humi_max.setGeometry(QtCore.QRect(140, 130, 121, 22))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.spinBox_humi_max.setFont(font)
        self.spinBox_humi_max.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.spinBox_humi_max.setProperty("value", 75)
        self.spinBox_humi_max.setObjectName("spinBox_humi_max")
        self.spinBox_humi_min = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_humi_min.setGeometry(QtCore.QRect(140, 180, 121, 22))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.spinBox_humi_min.setFont(font)
        self.spinBox_humi_min.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.spinBox_humi_min.setProperty("value", 30)
        self.spinBox_humi_min.setObjectName("spinBox_humi_min")
        self.pushButton_setting = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_setting.setGeometry(QtCore.QRect(310, 70, 101, 101))
        self.pushButton_setting.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, stop:0 rgba(0, 0, 0, 0), stop:0.52 rgba(0, 0, 0, 0), stop:0.565 rgba(82, 121, 76, 33), stop:0.65 rgba(159, 235, 148, 64), stop:0.721925 rgba(255, 238, 150, 129), stop:0.77 rgba(255, 128, 128, 204), stop:0.89 rgba(191, 128, 255, 64), stop:1 rgba(0, 0, 0, 0));\n"
"font: 14pt \"Arial\";")
        self.pushButton_setting.setObjectName("pushButton_setting")
        self.pushButton_setting.clicked.connect(self.data_settting)
        
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(490, 20, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(490, 100, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.lineEdit_is_no = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_is_no.setGeometry(QtCore.QRect(580, 100, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.lineEdit_is_no.setFont(font)
        self.lineEdit_is_no.setText("")
        self.lineEdit_is_no.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_is_no.setObjectName("lineEdit_is_no")
        self.lineEdit_is_no.setEnabled(False)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(490, 160, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(380, 210, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(530, 220, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.set_table_data)
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(30, 260, 841, 411))
        self.tableView.setObjectName("tableView")
        self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.model = QStandardItemModel(0, 5)
        # 设置表头标签
        self.model.setHorizontalHeaderLabels(['时间','温度', '湿度','报警类型','姓名学号'])
        # 设置表格的模型
        self.tableView.setStyleSheet("QTableView{background-color: rgb(255, 255, 255,80);}")
        self.tableView.setModel(self.model)
        # 设置tableView不可编辑
        self.tableView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        
        self.lineEdit_is_no_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_is_no_2.setGeometry(QtCore.QRect(630, 160, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.lineEdit_is_no_2.setFont(font)
        self.lineEdit_is_no_2.setText("")
        self.lineEdit_is_no_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_is_no_2.setObjectName("lineEdit_is_no_2")
        self.lineEdit_is_no_2.setEnabled(False)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 901, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.temp_max = self.spinBox_temp_max.value()
        self.temp_min = self.spinBox_temp_min.value()
        self.humi_max = self.spinBox_humi_max.value()
        self.humi_min = self.spinBox_humi_min.value()
        self.retranslateUi(MainWindow)
        self.set_table_data()
        self.set_edit_data()
        self.initUI()
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "41905225房彬彬的温湿度子系统"))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap('test.ico'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.temp_max_label.setText(_translate("MainWindow", "温度上限"))
        self.label_temp_min.setText(_translate("MainWindow", "温度下限"))
        self.label_humi_max.setText(_translate("MainWindow", "湿度上限"))
        self.label_4.setText(_translate("MainWindow", "湿度下限"))
        self.pushButton_setting.setText(_translate("MainWindow", "设置"))
        self.label_2.setText(_translate("MainWindow", "当前环境状态"))
        self.label_3.setText(_translate("MainWindow", "适合:"))
        self.label_5.setText(_translate("MainWindow", "警报状态:"))
        self.label_6.setText(_translate("MainWindow", "报警统计"))
        self.pushButton.setText(_translate("MainWindow", "刷新"))

    # 实时监听数据库数据变化
    def initUI(self):
        # 创建线程
        self.thread = QThread()
        self.backend = BackendThread1()
        # 连接信号
        self.backend.update_date.connect(self.set_edit_data)
        self.backend.moveToThread(self.thread)
        
        # 开始线程
        self.thread.started.connect(self.backend.run)
        self.thread.start()
    
    
    # 数据库连接
    def sql_connect(self):
        # 连接数据库
        con = pymysql.connect(
        host='127.0.0.1',
        port=3306,
        user='root',
        passwd='123456',
        db='py_t_h',
        charset='utf8'
        )
        return con
    
    # 读取数据（数据库数据）
    def read(self,con):
        cur = con.cursor()
        # 数据库命令
        select = cur.execute("SELECT * FROM alert")
        # 获取所有数据
        all = cur.fetchall()
        # 创建列表，存储作图所需要的数据
        date = []
        # date1 = []
        temp = []
        humi = []
        kinds = []
        stu_id = []
        # 判断是否有数据
        if len(all) > 0:
            for i in all:
                date.append(i[0])
                # date1.append(i[1])
                temp.append(round(float(i[1]),2))
                humi.append(round(float(i[2]),2))
                kinds.append(i[3])
                stu_id.append(i[4])
        else:
            print("数据库无数据！")
        # 返回作图所需的数据
        return [date,temp,humi,kinds,stu_id]
    
    # 表格数据（tableview数据）
    def set_table_data(self):
        data = self.read(self.sql_connect())
        # print(data)
        # return data
        self.model.clear()
        self.model.setHorizontalHeaderLabels(['时间','温度', '湿度','报警类型','姓名学号'])
        for i in range(len(data[0])):
                self.model.appendRow([
                    QStandardItem('%s' % str(data[0][i])),
                    QStandardItem('%s' % str(data[1][i])),
                    QStandardItem('%s' % str(data[2][i])),
                    QStandardItem('%s' % str(data[3][i])),
                    QStandardItem('%s' % str(data[4][i])),
                ])
    
    # 通过子系统设置数据
    def data_settting(self):
        self.temp_max = self.spinBox_temp_max.value()
        self.temp_min = self.spinBox_temp_min.value()
        self.humi_max = self.spinBox_humi_max.value()
        self.humi_min = self.spinBox_humi_min.value()
    
         
    # 子系统显示数据
    def set_edit_data(self):
        temp = ui0.Temp.value()
        humi = ui0.Humi.value()
        t = Beep()
        if (temp > self.temp_max or temp < self.temp_min) or (humi > self.humi_max or humi < self.humi_min):
            if humi > self.humi_max or humi < self.humi_min:
                if temp > self.temp_max or temp < self.temp_min:
                    self.lineEdit_is_no_2.setText("温湿报警")
                    kind = '温湿报警'
                    sql_0.insert_alert(temp,humi,kind,self.sql_connect())
                else:
                    self.lineEdit_is_no_2.setText("湿度报警")
                    kind = '湿度报警'
                    sql_0.insert_alert(temp,humi,kind,self.sql_connect())
            if temp > self.temp_max or temp < self.temp_min:
                if humi > self.humi_max or humi < self.humi_min:
                    self.lineEdit_is_no_2.setText("温湿报警")
                    kind = '温湿报警'
                    sql_0.insert_alert(temp,humi,kind,self.sql_connect())
                else:
                    self.lineEdit_is_no_2.setText("温度报警")
                    kind = '温度报警'
                    sql_0.insert_alert(temp,humi,kind,self.sql_connect())
            self.lineEdit_is_no.setText("收衣物")
            t.start()
            t.join()
        else:
            self.lineEdit_is_no.setText('晾晒衣物')
            self.lineEdit_is_no_2.setText('无报警')
            
from PyQt5.QtWebEngineWidgets import QWebEngineView
  
# 测试函数
if __name__ == "__main__":
    import sys
    suppress_qt_warnings()
    app = QtWidgets.QApplication(sys.argv)  # 创建QApplication对象
    Dialog = QtWidgets.QDialog()  # 创建QDialog对象
    MainWindow = QtWidgets.QMainWindow()
    MainWindow1 = QtWidgets.QMainWindow()
    # ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)
    palette = QtGui.QPalette()   # 创建QPalette对象
    # 设置背景图片
    palette.setBrush(QtGui.QPalette.Background, QtGui.QBrush(QtGui.QPixmap("water.jpg")))
    app.setPalette(palette)
    ui0 = Ui_Dialog() # 实例化
    ui0.setupUi(Dialog,data=sql_data(sql())) # 初始化
    ui1 = Ui_MainWindow()
    ui1.setupUi(MainWindow)
    ui2 = Ui_MainWindow1()
    ui2.setupUi(MainWindow1)
    
    ui0.pushButton.clicked.connect(lambda: MainWindow.show()) # 点击按钮触发事件
    ui0.pushButton1.clicked.connect(lambda: MainWindow1.show())
    Dialog.show() # 显示窗口
    sys.exit(app.exec_())  # 执行程序